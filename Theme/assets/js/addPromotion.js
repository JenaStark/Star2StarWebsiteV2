/**
 * Created by Michael on 5/13/16.
 */



var Comment = React.createClass({
    rawMarkup: function() {
        var rawMarkup = marked(this.props.children.toString(), {sanitize: true});
        return { __html: rawMarkup };
    },

    render: function() {
        return (
            <div className="comment">
                <h2 className="commentAuthor">
                    {this.props.author}
                </h2>
                <span dangerouslySetInnerHTML={this.rawMarkup()} />
            </div>
        );
    }
});

var CommentBox = React.createClass({
    /* Do not need to load data on this page
     loadCommentsFromServer: function() {
     $.ajax({
     url: this.props.url,
     dataType: 'json',
     cache: false,
     success: function(data) {
     this.setState({data: data});
     }.bind(this),
     error: function(xhr, status, err) {
     console.error(this.props.url, status, err.toString());
     }.bind(this)
     });
     },*/
    handleCommentSubmit: function(comment) {
        var comments = this.state.data;
        // Optimistically set an id on the new comment. It will be replaced by an
        // id generated by the server. In a production application you would likely
        // not use Date.now() for this and would have a more robust system in place.
        comment.id = Date.now();
        var newComments = comments.concat([comment]);
        this.setState({data: newComments});
        $.ajax({
            url: this.props.url,
            dataType: 'json',
            type: 'POST',
            data: comment,
            success: function(data) {
                this.setState({data: data});
            }.bind(this),
            error: function(xhr, status, err) {
                this.setState({data: comments});
                console.error(this.props.url, status, err.toString());
            }.bind(this)
        });
    },
    getInitialState: function() {
        return {data: []};
    },
    /* Got rid of displaying old data when mounting
     componentDidMount: function() {
     this.loadCommentsFromServer();
     setInterval(this.loadCommentsFromServer, this.props.pollInterval);
     },*/
    /* Include  <CommentList data={this.state.data} /> to display data*/
    render: function() {
        return (
            <div className="commentBox">
                <CommentForm onCommentSubmit={this.handleCommentSubmit} />
            </div>
        );
    }
});

var CommentList = React.createClass({
    render: function() {
        var commentNodes = this.props.data.map(function(comment) {
            var date = new Date();

            return (
                <Comment author={comment.author} key={comment.id} start={comment.start} end={comment.end}
                         posted = {comment.posted} status = {comment.status} completed = {comment.completed}>
                    {comment.text}
                </Comment>
            );
        });
        return (
            <div className="commentList">
                {commentNodes}
            </div>
        );
    }
});



var CommentForm = React.createClass({
    getInitialState: function() {
        return {author: '', text: '', end: '', start: '', file: '', status: ''};
    },
    handleAuthorChange: function(e) {
        this.setState({author: e.target.value});
    },
    handleTextChange: function(e) {
        this.setState({text: e.target.value});
    },
    handleEndChange: function(e) {
        this.setState({end: e.target.value});
    },

    handleStartChange: function(e) {
        this.setState({start: e.target.value});
    },

    handleSubmit: function(e) {
        e.preventDefault();
        var author = this.state.author.trim();
        var text = this.state.text.trim();
        var start = this.state.start.trim();
        var end = this.state.end.trim();
        var date = new Date();
        var localdate = date.toLocaleString();
        var status = false;
        if (!text || !author || !start || !end) {
            return;
        }

            if (Date.parse(end) < date ) {
                status = true;
            }


        this.props.onCommentSubmit({author: author, text: text, start: start, end: end, posted: localdate, status: status, completed: 'false'});
        this.setState({author: '', text: '', start: '', end: '', status: ''});
    },
    render: function() {
        return (
            <form class="form-horizontal style-form" onSubmit={this.handleSubmit}>
                <input class = "form"
                       type="text"
                       placeholder="PROMOTION NAME"
                       value={this.state.author}
                       onChange={this.handleAuthorChange}
                />
                <p></p>
                <input class = "form" id = "description"
                       type="text"
                       placeholder="DESCRIPTION"
                       value={this.state.text}
                       onChange={this.handleTextChange}
                />
                <p></p>
                <span id ="dates">
                    <span id="startdatetext"> START: </span>
                <input id = "start"
                       type="date"
                       value = {this.state.start}
                       onChange={this.handleStartChange}
                />
                <span id = "enddatetext"> END: </span>
                <input id = "end"
                       type = "date"
                       value = {this.state.end}
                       onChange={this.handleEndChange}

                /> </span>
                <p></p>
                <span id = "filespan">
                <input id="file"
                       type = "file"
                       value = {this.state.file}
                /> </span>
                <input type="submit" value="POST PROMOTION" id ="submit"/>
            </form>
        );
    }
});

ReactDOM.render(
    <CommentBox url="/api/comments" />,
    document.getElementById('content')
);
